#!/bin/sh

unset IFS

pwmgr_db_path=~/.pwmgr/db.json

fail () { echo "$*" >&2; exit 1;}

while getopts :f: arg; do
	case ${arg} in
		f)
			pwmgr_db_path=${OPTARG}
			;;
	esac
done

pwmgr_db_temp_path=${pwmgr_db_path}.tmp

mkdir -p `dirname $pwmgr_db_path`

[ -e "${pwmgr_db_path}" ] || echo "{}" > ${pwmgr_db_path}

echo "[A]dd, [R]emove, [E]dit, [O]tp key, [M]aster password Validation, E[x]it"
read -p "Choose a command: " command

case "$command" in
	o|O)
		read -p "Change OTP key? " confirm
		[ "${confirm}" = "y" ] || exit 0;

		otp_key=`dd bs=20 if=/dev/urandom count=1 2>&- | xxd -p` || fail "Failed to obtain key"

		jq --tab ".\"otp_key\" = \"${otp_key}\"" ${pwmgr_db_path} > ${pwmgr_db_temp_path} || fail "jq failed"
		mv -f ${pwmgr_db_temp_path} ${pwmgr_db_path} || fail "Failed moving resulting file"

		echo New OTP key: ${otp_key}

		exit 0
		;;
	m|M)
		read -p "Change master password validation? " confirm
		[ "${confirm}" = "y" ] || exit 0;
		
		challenge=`dd bs=30 if=/dev/urandom count=1 2>&- | openssl enc -base64` || fail "Failed to obtain challenge value"
		echo New challenge value: ${challenge}
		read -p "New response: " response

		jq --tab ".\"master_key_challenge\" = \"${challenge}\" | .\"master_key_response\" = \"${response}\"" ${pwmgr_db_path} > ${pwmgr_db_temp_path} || fail "jq failed"
		mv -f ${pwmgr_db_temp_path} ${pwmgr_db_path} || fail "Failed moving resulting file"

		exit 0
		;;
	x|X)
		exit 0
		;;
	a|A)
		;;
	e|E)
		;;
	r|R)
		;;
	*)
		fail "Unrecognized command"
		;;
esac

read -p "Location: " location
read -p "Username: " username

key="$username|$location"

case "$command" in
	a|A)
		jq -e ".\"$key\"" ${pwmgr_db_path} > /dev/null && fail "Entry already exists"
		salt=`dd bs=30 if=/dev/urandom count=1 2>&- | openssl enc -base64` || fail "Failed to obtain salt"

		read -p "Category: " category

		read -p "Extra:" extra

		read -p "Length: " length
		unset length_string
		if [ -n "${length}" ] && [ ${length} -gt 0 ] && [ ${length} -lt 85 ] ; then
			length_string=", \"length\": ${length} "
		fi

		unset link
		while [ "${link}" != "y" ] && [ "${link}" != "n" ]; do
			read -p "Link (y or n): " link
		done

		if [ "${link}" = "y" ]; then
			link_string=", \"link\": true"
		else
			link_string=", \"link\": false"
		fi

		while true; do
			read -p "Substitution characters for '+' and '/' (2 characters or none for default): " subs
			unset subs_string
			if [ `echo -n ${subs} | wc -c` -eq "2" ]; then
				subs_string=", \"subs\": \"${subs}\""
				break
			elif [ -z "${subs}" ]; then
				break
			fi
			echo "Substitution characters was not exactly two character long"
		done

		json="{\"${key}\": {\"location\":\"${location}\", \"username\":\"${username}\", \"category\":\"${category}\", \"extra\":\"${extra}\", \"gen_time\":\"`date -u \"+%Y-%m-%d %H:%M:%S\"`\", \"salt\":\"${salt}\"${length_string}${link_string}${subs_string}}}"
		jq --tab ".+$json" ${pwmgr_db_path} > ${pwmgr_db_temp_path} || fail "jq failed"
		mv -f ${pwmgr_db_temp_path} ${pwmgr_db_path} || fail "Failed moving resulting file"

		;&
	e|E)
		while true; do
			echo
			jq -e ".\"$key\"" ${pwmgr_db_path} || fail "Entry does not exist"
			echo -e "[C]ategory, [E]xtra, [L]ength, Lin[k], [S]ubstitution characters,\nChange [P]assword, E[x]it"
			read -p "Choose a field to edit or an action: " action
			case "$action" in
				c|C)
					read -p "Category: " category
					jq --tab ".\"${key}\".\"category\" = \"${category}\"" ${pwmgr_db_path} > ${pwmgr_db_temp_path} || fail "jq failed"
					mv -f ${pwmgr_db_temp_path} ${pwmgr_db_path} || fail "Failed moving resulting file"
					;;
				e|E)
					read -p "Extra: " extra
					jq --tab ".\"${key}\".\"extra\" = \"${extra}\"" ${pwmgr_db_path} > ${pwmgr_db_temp_path} || fail "jq failed"
					mv -f ${pwmgr_db_temp_path} ${pwmgr_db_path} || fail "Failed moving resulting file"
					;;
				l|L)
					read -p "Length: " length

					if [ -n "${length}" ] && [ ${length} -gt 0 ] && [ ${length} -lt 85 ]; then
						length_string=".\"${key}\".\"length\" = ${length}"
					else
						length_string="del(.\"${key}\".\"length\")"
					fi
					jq --tab "${length_string}" ${pwmgr_db_path} > ${pwmgr_db_temp_path} || fail "jq failed"
					mv -f ${pwmgr_db_temp_path} ${pwmgr_db_path} || fail "Failed moving resulting file"
					;;
				k|K)
					unset link
					while [ "${link}" != "y" ] && [ "${link}" != "n" ]; do
						read -p "Link (y or n): " link
					done

					if [ "${link}" = "y" ]; then
						link_string=".\"${key}\".\"link\" = true"
					else
						link_string=".\"${key}\".\"link\" = false"
					fi
					jq --tab "${link_string}" ${pwmgr_db_path} > ${pwmgr_db_temp_path} || fail "jq failed"
					mv -f ${pwmgr_db_temp_path} ${pwmgr_db_path} || fail "Failed moving resulting file"
					;;
				s|S)
					while true; do
						read -p "Substitution characters for '+' and '/' (2 characters or none for default): " subs
						if [ `echo -n ${subs} | wc -c` -eq "2" ]; then
							subs_string=".\"${key}\".\"subs\" = \"${subs}\""
							break
						elif [ -z "${subs}" ]; then
							subs_string="del(.\"${key}\".\"subs\")"
							break
						fi
						echo "Substitution characters was not exactly two character long"
					done
					jq --tab "${subs_string}" ${pwmgr_db_path} > ${pwmgr_db_temp_path} || fail "jq failed"
					mv -f ${pwmgr_db_temp_path} ${pwmgr_db_path} || fail "Failed moving resulting file"
					while true; do
						echo "extra substitutions:"
						jq -e ".\"$key\".extra_subs" ${pwmgr_db_path} || echo "none"
						echo "[A]dd, [R]emove, [B]ack"
						read -p "Choose an action: " action
						case "$action" in
							a|A)
								while true; do
									read -p "Choose character to substitute (empty to cancel): " char
									if [ -z "${char}" ]; then
										break
									fi
									if echo ${char} | grep -q '^[[:alnum:]]$'; then
										break
									fi
									echo "Please enter a signle alphanumeric character".
								done

								if [ -n "${char}" ]; then
									read -p "Choose the character to use as replacement: " repl
									if [ -n "${repl}" ]; then
										jq --tab ".\"${key}\".\"extra_subs\".\"${char}\" = \"${repl}\"" ${pwmgr_db_path} > ${pwmgr_db_temp_path} || fail "jq failed"
										mv -f ${pwmgr_db_temp_path} ${pwmgr_db_path} || fail "Failed moving resulting file"
									fi
								fi
								;;
							r|R)
								while true; do
									read -p "Choose character to stop substituting (empty to cancel): " char
									if [ -z "${char}" ]; then
										break
									fi
									if echo ${char} | grep -q '^[[:alnum:]]$'; then
										break
									fi
									echo "Please enter a signle alphanumeric character".
								done
								if [ -n "${char}" ]; then
									jq --tab "del(.\"${key}\".\"extra_subs\".\"${char}\")" ${pwmgr_db_path} > ${pwmgr_db_temp_path} || fail "jq failed"
									mv -f ${pwmgr_db_temp_path} ${pwmgr_db_path} || fail "Failed moving resulting file"
								fi
								;;
							b|B)
								break
								;;
							*)
								echo "Unrecognized action"

						esac

					done
					;;
				p|P)
					read -p "Change password? " confirm
					[ "${confirm}" = "y" ] || exit 0;

					salt=`dd bs=30 if=/dev/urandom count=1 2>&- | openssl enc -base64` || fail "Failed to obtain salt"
					jq --tab ".\"${key}\".\"salt\" = \"${salt}\" | .\"${key}\".\"gen_time\"=\"`date -u \"+%Y-%m-%d %H:%M:%S\"`\"" ${pwmgr_db_path} > ${pwmgr_db_temp_path} || fail "jq failed"
					mv -f ${pwmgr_db_temp_path} ${pwmgr_db_path} || fail "Failed moving resulting file"
					;;
				x|X)
					break
					;;
				*)
					echo "Unrecognized action"
			esac
		done
		;;

	r|R)
		jq -e ".\"$key\"" ${pwmgr_db_path} || fail "Entry does not exist"
		read -p "Remove? " confirm
		[ "${confirm}" = "y" ] || exit 0;

		jq --tab "del(.\"${key}\")" ${pwmgr_db_path} > ${pwmgr_db_temp_path} || fail "jq failed"
		mv -f ${pwmgr_db_temp_path} ${pwmgr_db_path} || fail "Failed moving resulting file"
		;;

	*)
		fail "Unrecognized command"
		;;
esac

